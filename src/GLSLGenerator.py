#!/usr/bin/env python

allperms = []
for i in range(2):
    if i == 0:
        vec1vars = ['x']
        vec2vars = vec1vars + ['y']
        vec3vars = vec2vars + ['z']
        vec4vars = vec3vars + ['w']
    else:
        vec1vars = ['r']
        vec2vars = vec1vars + ['g']
        vec3vars = vec2vars + ['b']
        vec4vars = vec3vars + ['a']

    vec2perms = []
    for a in vec2vars:
        vec2perms.append(a)
    for a in vec2vars:
        for b in vec2vars:
            vec2perms.append(a + b)

    vec3perms = []
    for a in vec3vars:
        vec3perms.append(a)
    for a in vec3vars:
        for b in vec3vars:
            vec3perms.append(a + b)
    for a in vec3vars:
        for b in vec3vars:
            for c in vec3vars:
                vec3perms.append(a + b + c)

    vec4perms = []
    for a in vec4vars:
        vec4perms.append(a)
    for a in vec4vars:
        for b in vec4vars:
            vec4perms.append(a + b)
    for a in vec4vars:
        for b in vec4vars:
            for c in vec4vars:
                vec4perms.append(a + b + c)
    for a in vec4vars:
        for b in vec4vars:
            for c in vec4vars:
                for d in vec4vars:
                    vec4perms.append(a + b + c + d)

    allperms += vec2perms + vec3perms + vec4perms

allperms = sorted(list(set(allperms)))

fd = file('GLSLSwizzleType.re', 'w')
fd.write(
'''/* Auto-generated by GLSLGenerator.py */
type swizzleT =
%s;
''' % ("\n".join(["  | " + x.upper() for x in allperms]))
)
fd.close()

def getType(x):
    if len(x) == 1:
        return "Float"
    elif len(x) == 2:
        return "Vec2"
    elif len(x) == 3:
        return "Vec3"
    elif len(x) == 4:
        return "Vec4"

def getTypeFun(x):
    if 'w' in x or 'a' in x:
        return "accept4"
    elif 'z' in x or 'b' in x:
        return "accept3"
    elif 'y' in x or 'z' in x:
        return "accept2"
    else:
        return "accept1"

fd = file('GLSLSwizzleFormat.re', 'w')
fd.write(
'''/* Auto-generated by GLSLGenerator.py */
include GLSLSwizzleType;

module PhantomAlgebra = Core;

let protoScalar = PhantomAlgebra.scalar(1.0);

let protoFloat = protoScalar;

let protoVec2 = PhantomAlgebra.vec2(1.0, 1.0);

let protoVec3 = PhantomAlgebra.vec3(1.0, 1.0, 1.0);

let protoVec4 = PhantomAlgebra.vec4(1.0, 1.0, 1.0, 1.0);

let protoMat2 = PhantomAlgebra.mat2(protoVec2, protoVec2);

let protoMat3 = PhantomAlgebra.mat3(protoVec3, protoVec3, protoVec3);

let protoMat4 = PhantomAlgebra.mat4(protoVec4, protoVec4, protoVec4, protoVec4);

let fmtSwizzle = (swizzle: swizzleT) =>
  switch swizzle {
  %s
  };

  /*
let accept1 : [< `Float | `Vec2 | `Vec3 | `Vec4] => unit = (_) => ();
let accept2 : [< `Vec2 | `Vec3 | `Vec4] => unit = (_) => ();
let accept3 : [< `Vec3 | `Vec4] => unit = (_) => ();
let accept4 : [< `Vec4] => unit = (_) => ();
*/

let accept1 = a => PhantomAlgebra.get(a, PhantomAlgebra.x);
let accept2 = a => PhantomAlgebra.get(a, PhantomAlgebra.y);
let accept3 = a => PhantomAlgebra.get(a, PhantomAlgebra.z);
let accept4 = a => PhantomAlgebra.get(a, PhantomAlgebra.w);
%s
''' % (
    "\n".join(['  | %s => "%s"' % (x.upper(), x.lower()) for x in allperms]),
    "\n".join(["  let %s' = (proto%s, %s, %s);" % (x.lower(), getType(x), x.upper(), getTypeFun(x)) for x in allperms])))

fd.close()
