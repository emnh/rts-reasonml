#!/usr/bin/env python

allperms = []
for i in range(2):
    if i == 0:
        vec1vars = ['x']
        vec2vars = vec1vars + ['y']
        vec3vars = vec2vars + ['z']
        vec4vars = vec3vars + ['w']
    else:
        vec1vars = ['r']
        vec2vars = vec1vars + ['g']
        vec3vars = vec2vars + ['b']
        vec4vars = vec3vars + ['a']

    vec2perms = []
    for a in vec2vars:
        vec2perms.append(a)
    for a in vec2vars:
        for b in vec2vars:
            vec2perms.append(a + b)

    vec3perms = []
    for a in vec3vars:
        vec3perms.append(a)
    for a in vec3vars:
        for b in vec3vars:
            vec3perms.append(a + b)
    for a in vec3vars:
        for b in vec3vars:
            for c in vec3vars:
                vec3perms.append(a + b + c)

    vec4perms = []
    for a in vec4vars:
        vec4perms.append(a)
    for a in vec4vars:
        for b in vec4vars:
            vec4perms.append(a + b)
    for a in vec4vars:
        for b in vec4vars:
            for c in vec4vars:
                vec4perms.append(a + b + c)
    for a in vec4vars:
        for b in vec4vars:
            for c in vec4vars:
                for d in vec4vars:
                    vec4perms.append(a + b + c + d)

    allperms += vec2perms + vec3perms + vec4perms

allperms = sorted(list(set(allperms)))

fd = file('GLSLSwizzleType.re', 'w')
fd.write(
'''/* Auto-generated by GLSLGenerator.py */
type swizzleT =
%s;
''' % ("\n".join(["  | " + x.upper() for x in allperms]))
)
fd.close()

def getType(x):
    if len(x) == 1:
        return "Float"
    elif len(x) == 2:
        return "Vec2"
    elif len(x) == 3:
        return "Vec3"
    elif len(x) == 4:
        return "Vec4"

def getTypeFun(x):
    return "accept" + str(len(x))

fd = file('GLSLSwizzleFormat.re', 'w')
fd.write(
'''/* Auto-generated by GLSLGenerator.py */
include GLSLSwizzleType;

let fmtSwizzle = (swizzle: swizzleT) =>
  switch swizzle {
  %s
  };

let accept1 : [< `Float | `Vec2 | `Vec3 | `Vec4] => unit = (_) => ();
let accept2 : [< `Vec2 | `Vec3 | `Vec4] => unit = (_) => ();
let accept3 : [< `Vec3 | `Vec4] => unit = (_) => ();
let accept4 : [< `Vec4] => unit = (_) => ();

%s
''' % (
    "\n".join(['  | %s => "%s" ' % (x.upper(), x.lower()) for x in allperms]),
    "\n".join(['  let _%s = (`%s, %s, %s);' % (x.lower(), getType(x), x.upper(), getTypeFun(x)) for x in allperms])))

fd.close()
