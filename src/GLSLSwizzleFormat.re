/* Auto-generated by GLSLGenerator.py */
include GLSLSwizzleType;

let fmtSwizzle = (swizzle: swizzleT) =>
  switch swizzle {
    | A => "a" 
  | AA => "aa" 
  | AAA => "aaa" 
  | AAAA => "aaaa" 
  | AAAB => "aaab" 
  | AAAG => "aaag" 
  | AAAR => "aaar" 
  | AAB => "aab" 
  | AABA => "aaba" 
  | AABB => "aabb" 
  | AABG => "aabg" 
  | AABR => "aabr" 
  | AAG => "aag" 
  | AAGA => "aaga" 
  | AAGB => "aagb" 
  | AAGG => "aagg" 
  | AAGR => "aagr" 
  | AAR => "aar" 
  | AARA => "aara" 
  | AARB => "aarb" 
  | AARG => "aarg" 
  | AARR => "aarr" 
  | AB => "ab" 
  | ABA => "aba" 
  | ABAA => "abaa" 
  | ABAB => "abab" 
  | ABAG => "abag" 
  | ABAR => "abar" 
  | ABB => "abb" 
  | ABBA => "abba" 
  | ABBB => "abbb" 
  | ABBG => "abbg" 
  | ABBR => "abbr" 
  | ABG => "abg" 
  | ABGA => "abga" 
  | ABGB => "abgb" 
  | ABGG => "abgg" 
  | ABGR => "abgr" 
  | ABR => "abr" 
  | ABRA => "abra" 
  | ABRB => "abrb" 
  | ABRG => "abrg" 
  | ABRR => "abrr" 
  | AG => "ag" 
  | AGA => "aga" 
  | AGAA => "agaa" 
  | AGAB => "agab" 
  | AGAG => "agag" 
  | AGAR => "agar" 
  | AGB => "agb" 
  | AGBA => "agba" 
  | AGBB => "agbb" 
  | AGBG => "agbg" 
  | AGBR => "agbr" 
  | AGG => "agg" 
  | AGGA => "agga" 
  | AGGB => "aggb" 
  | AGGG => "aggg" 
  | AGGR => "aggr" 
  | AGR => "agr" 
  | AGRA => "agra" 
  | AGRB => "agrb" 
  | AGRG => "agrg" 
  | AGRR => "agrr" 
  | AR => "ar" 
  | ARA => "ara" 
  | ARAA => "araa" 
  | ARAB => "arab" 
  | ARAG => "arag" 
  | ARAR => "arar" 
  | ARB => "arb" 
  | ARBA => "arba" 
  | ARBB => "arbb" 
  | ARBG => "arbg" 
  | ARBR => "arbr" 
  | ARG => "arg" 
  | ARGA => "arga" 
  | ARGB => "argb" 
  | ARGG => "argg" 
  | ARGR => "argr" 
  | ARR => "arr" 
  | ARRA => "arra" 
  | ARRB => "arrb" 
  | ARRG => "arrg" 
  | ARRR => "arrr" 
  | B => "b" 
  | BA => "ba" 
  | BAA => "baa" 
  | BAAA => "baaa" 
  | BAAB => "baab" 
  | BAAG => "baag" 
  | BAAR => "baar" 
  | BAB => "bab" 
  | BABA => "baba" 
  | BABB => "babb" 
  | BABG => "babg" 
  | BABR => "babr" 
  | BAG => "bag" 
  | BAGA => "baga" 
  | BAGB => "bagb" 
  | BAGG => "bagg" 
  | BAGR => "bagr" 
  | BAR => "bar" 
  | BARA => "bara" 
  | BARB => "barb" 
  | BARG => "barg" 
  | BARR => "barr" 
  | BB => "bb" 
  | BBA => "bba" 
  | BBAA => "bbaa" 
  | BBAB => "bbab" 
  | BBAG => "bbag" 
  | BBAR => "bbar" 
  | BBB => "bbb" 
  | BBBA => "bbba" 
  | BBBB => "bbbb" 
  | BBBG => "bbbg" 
  | BBBR => "bbbr" 
  | BBG => "bbg" 
  | BBGA => "bbga" 
  | BBGB => "bbgb" 
  | BBGG => "bbgg" 
  | BBGR => "bbgr" 
  | BBR => "bbr" 
  | BBRA => "bbra" 
  | BBRB => "bbrb" 
  | BBRG => "bbrg" 
  | BBRR => "bbrr" 
  | BG => "bg" 
  | BGA => "bga" 
  | BGAA => "bgaa" 
  | BGAB => "bgab" 
  | BGAG => "bgag" 
  | BGAR => "bgar" 
  | BGB => "bgb" 
  | BGBA => "bgba" 
  | BGBB => "bgbb" 
  | BGBG => "bgbg" 
  | BGBR => "bgbr" 
  | BGG => "bgg" 
  | BGGA => "bgga" 
  | BGGB => "bggb" 
  | BGGG => "bggg" 
  | BGGR => "bggr" 
  | BGR => "bgr" 
  | BGRA => "bgra" 
  | BGRB => "bgrb" 
  | BGRG => "bgrg" 
  | BGRR => "bgrr" 
  | BR => "br" 
  | BRA => "bra" 
  | BRAA => "braa" 
  | BRAB => "brab" 
  | BRAG => "brag" 
  | BRAR => "brar" 
  | BRB => "brb" 
  | BRBA => "brba" 
  | BRBB => "brbb" 
  | BRBG => "brbg" 
  | BRBR => "brbr" 
  | BRG => "brg" 
  | BRGA => "brga" 
  | BRGB => "brgb" 
  | BRGG => "brgg" 
  | BRGR => "brgr" 
  | BRR => "brr" 
  | BRRA => "brra" 
  | BRRB => "brrb" 
  | BRRG => "brrg" 
  | BRRR => "brrr" 
  | G => "g" 
  | GA => "ga" 
  | GAA => "gaa" 
  | GAAA => "gaaa" 
  | GAAB => "gaab" 
  | GAAG => "gaag" 
  | GAAR => "gaar" 
  | GAB => "gab" 
  | GABA => "gaba" 
  | GABB => "gabb" 
  | GABG => "gabg" 
  | GABR => "gabr" 
  | GAG => "gag" 
  | GAGA => "gaga" 
  | GAGB => "gagb" 
  | GAGG => "gagg" 
  | GAGR => "gagr" 
  | GAR => "gar" 
  | GARA => "gara" 
  | GARB => "garb" 
  | GARG => "garg" 
  | GARR => "garr" 
  | GB => "gb" 
  | GBA => "gba" 
  | GBAA => "gbaa" 
  | GBAB => "gbab" 
  | GBAG => "gbag" 
  | GBAR => "gbar" 
  | GBB => "gbb" 
  | GBBA => "gbba" 
  | GBBB => "gbbb" 
  | GBBG => "gbbg" 
  | GBBR => "gbbr" 
  | GBG => "gbg" 
  | GBGA => "gbga" 
  | GBGB => "gbgb" 
  | GBGG => "gbgg" 
  | GBGR => "gbgr" 
  | GBR => "gbr" 
  | GBRA => "gbra" 
  | GBRB => "gbrb" 
  | GBRG => "gbrg" 
  | GBRR => "gbrr" 
  | GG => "gg" 
  | GGA => "gga" 
  | GGAA => "ggaa" 
  | GGAB => "ggab" 
  | GGAG => "ggag" 
  | GGAR => "ggar" 
  | GGB => "ggb" 
  | GGBA => "ggba" 
  | GGBB => "ggbb" 
  | GGBG => "ggbg" 
  | GGBR => "ggbr" 
  | GGG => "ggg" 
  | GGGA => "ggga" 
  | GGGB => "gggb" 
  | GGGG => "gggg" 
  | GGGR => "gggr" 
  | GGR => "ggr" 
  | GGRA => "ggra" 
  | GGRB => "ggrb" 
  | GGRG => "ggrg" 
  | GGRR => "ggrr" 
  | GR => "gr" 
  | GRA => "gra" 
  | GRAA => "graa" 
  | GRAB => "grab" 
  | GRAG => "grag" 
  | GRAR => "grar" 
  | GRB => "grb" 
  | GRBA => "grba" 
  | GRBB => "grbb" 
  | GRBG => "grbg" 
  | GRBR => "grbr" 
  | GRG => "grg" 
  | GRGA => "grga" 
  | GRGB => "grgb" 
  | GRGG => "grgg" 
  | GRGR => "grgr" 
  | GRR => "grr" 
  | GRRA => "grra" 
  | GRRB => "grrb" 
  | GRRG => "grrg" 
  | GRRR => "grrr" 
  | R => "r" 
  | RA => "ra" 
  | RAA => "raa" 
  | RAAA => "raaa" 
  | RAAB => "raab" 
  | RAAG => "raag" 
  | RAAR => "raar" 
  | RAB => "rab" 
  | RABA => "raba" 
  | RABB => "rabb" 
  | RABG => "rabg" 
  | RABR => "rabr" 
  | RAG => "rag" 
  | RAGA => "raga" 
  | RAGB => "ragb" 
  | RAGG => "ragg" 
  | RAGR => "ragr" 
  | RAR => "rar" 
  | RARA => "rara" 
  | RARB => "rarb" 
  | RARG => "rarg" 
  | RARR => "rarr" 
  | RB => "rb" 
  | RBA => "rba" 
  | RBAA => "rbaa" 
  | RBAB => "rbab" 
  | RBAG => "rbag" 
  | RBAR => "rbar" 
  | RBB => "rbb" 
  | RBBA => "rbba" 
  | RBBB => "rbbb" 
  | RBBG => "rbbg" 
  | RBBR => "rbbr" 
  | RBG => "rbg" 
  | RBGA => "rbga" 
  | RBGB => "rbgb" 
  | RBGG => "rbgg" 
  | RBGR => "rbgr" 
  | RBR => "rbr" 
  | RBRA => "rbra" 
  | RBRB => "rbrb" 
  | RBRG => "rbrg" 
  | RBRR => "rbrr" 
  | RG => "rg" 
  | RGA => "rga" 
  | RGAA => "rgaa" 
  | RGAB => "rgab" 
  | RGAG => "rgag" 
  | RGAR => "rgar" 
  | RGB => "rgb" 
  | RGBA => "rgba" 
  | RGBB => "rgbb" 
  | RGBG => "rgbg" 
  | RGBR => "rgbr" 
  | RGG => "rgg" 
  | RGGA => "rgga" 
  | RGGB => "rggb" 
  | RGGG => "rggg" 
  | RGGR => "rggr" 
  | RGR => "rgr" 
  | RGRA => "rgra" 
  | RGRB => "rgrb" 
  | RGRG => "rgrg" 
  | RGRR => "rgrr" 
  | RR => "rr" 
  | RRA => "rra" 
  | RRAA => "rraa" 
  | RRAB => "rrab" 
  | RRAG => "rrag" 
  | RRAR => "rrar" 
  | RRB => "rrb" 
  | RRBA => "rrba" 
  | RRBB => "rrbb" 
  | RRBG => "rrbg" 
  | RRBR => "rrbr" 
  | RRG => "rrg" 
  | RRGA => "rrga" 
  | RRGB => "rrgb" 
  | RRGG => "rrgg" 
  | RRGR => "rrgr" 
  | RRR => "rrr" 
  | RRRA => "rrra" 
  | RRRB => "rrrb" 
  | RRRG => "rrrg" 
  | RRRR => "rrrr" 
  | W => "w" 
  | WW => "ww" 
  | WWW => "www" 
  | WWWW => "wwww" 
  | WWWX => "wwwx" 
  | WWWY => "wwwy" 
  | WWWZ => "wwwz" 
  | WWX => "wwx" 
  | WWXW => "wwxw" 
  | WWXX => "wwxx" 
  | WWXY => "wwxy" 
  | WWXZ => "wwxz" 
  | WWY => "wwy" 
  | WWYW => "wwyw" 
  | WWYX => "wwyx" 
  | WWYY => "wwyy" 
  | WWYZ => "wwyz" 
  | WWZ => "wwz" 
  | WWZW => "wwzw" 
  | WWZX => "wwzx" 
  | WWZY => "wwzy" 
  | WWZZ => "wwzz" 
  | WX => "wx" 
  | WXW => "wxw" 
  | WXWW => "wxww" 
  | WXWX => "wxwx" 
  | WXWY => "wxwy" 
  | WXWZ => "wxwz" 
  | WXX => "wxx" 
  | WXXW => "wxxw" 
  | WXXX => "wxxx" 
  | WXXY => "wxxy" 
  | WXXZ => "wxxz" 
  | WXY => "wxy" 
  | WXYW => "wxyw" 
  | WXYX => "wxyx" 
  | WXYY => "wxyy" 
  | WXYZ => "wxyz" 
  | WXZ => "wxz" 
  | WXZW => "wxzw" 
  | WXZX => "wxzx" 
  | WXZY => "wxzy" 
  | WXZZ => "wxzz" 
  | WY => "wy" 
  | WYW => "wyw" 
  | WYWW => "wyww" 
  | WYWX => "wywx" 
  | WYWY => "wywy" 
  | WYWZ => "wywz" 
  | WYX => "wyx" 
  | WYXW => "wyxw" 
  | WYXX => "wyxx" 
  | WYXY => "wyxy" 
  | WYXZ => "wyxz" 
  | WYY => "wyy" 
  | WYYW => "wyyw" 
  | WYYX => "wyyx" 
  | WYYY => "wyyy" 
  | WYYZ => "wyyz" 
  | WYZ => "wyz" 
  | WYZW => "wyzw" 
  | WYZX => "wyzx" 
  | WYZY => "wyzy" 
  | WYZZ => "wyzz" 
  | WZ => "wz" 
  | WZW => "wzw" 
  | WZWW => "wzww" 
  | WZWX => "wzwx" 
  | WZWY => "wzwy" 
  | WZWZ => "wzwz" 
  | WZX => "wzx" 
  | WZXW => "wzxw" 
  | WZXX => "wzxx" 
  | WZXY => "wzxy" 
  | WZXZ => "wzxz" 
  | WZY => "wzy" 
  | WZYW => "wzyw" 
  | WZYX => "wzyx" 
  | WZYY => "wzyy" 
  | WZYZ => "wzyz" 
  | WZZ => "wzz" 
  | WZZW => "wzzw" 
  | WZZX => "wzzx" 
  | WZZY => "wzzy" 
  | WZZZ => "wzzz" 
  | X => "x" 
  | XW => "xw" 
  | XWW => "xww" 
  | XWWW => "xwww" 
  | XWWX => "xwwx" 
  | XWWY => "xwwy" 
  | XWWZ => "xwwz" 
  | XWX => "xwx" 
  | XWXW => "xwxw" 
  | XWXX => "xwxx" 
  | XWXY => "xwxy" 
  | XWXZ => "xwxz" 
  | XWY => "xwy" 
  | XWYW => "xwyw" 
  | XWYX => "xwyx" 
  | XWYY => "xwyy" 
  | XWYZ => "xwyz" 
  | XWZ => "xwz" 
  | XWZW => "xwzw" 
  | XWZX => "xwzx" 
  | XWZY => "xwzy" 
  | XWZZ => "xwzz" 
  | XX => "xx" 
  | XXW => "xxw" 
  | XXWW => "xxww" 
  | XXWX => "xxwx" 
  | XXWY => "xxwy" 
  | XXWZ => "xxwz" 
  | XXX => "xxx" 
  | XXXW => "xxxw" 
  | XXXX => "xxxx" 
  | XXXY => "xxxy" 
  | XXXZ => "xxxz" 
  | XXY => "xxy" 
  | XXYW => "xxyw" 
  | XXYX => "xxyx" 
  | XXYY => "xxyy" 
  | XXYZ => "xxyz" 
  | XXZ => "xxz" 
  | XXZW => "xxzw" 
  | XXZX => "xxzx" 
  | XXZY => "xxzy" 
  | XXZZ => "xxzz" 
  | XY => "xy" 
  | XYW => "xyw" 
  | XYWW => "xyww" 
  | XYWX => "xywx" 
  | XYWY => "xywy" 
  | XYWZ => "xywz" 
  | XYX => "xyx" 
  | XYXW => "xyxw" 
  | XYXX => "xyxx" 
  | XYXY => "xyxy" 
  | XYXZ => "xyxz" 
  | XYY => "xyy" 
  | XYYW => "xyyw" 
  | XYYX => "xyyx" 
  | XYYY => "xyyy" 
  | XYYZ => "xyyz" 
  | XYZ => "xyz" 
  | XYZW => "xyzw" 
  | XYZX => "xyzx" 
  | XYZY => "xyzy" 
  | XYZZ => "xyzz" 
  | XZ => "xz" 
  | XZW => "xzw" 
  | XZWW => "xzww" 
  | XZWX => "xzwx" 
  | XZWY => "xzwy" 
  | XZWZ => "xzwz" 
  | XZX => "xzx" 
  | XZXW => "xzxw" 
  | XZXX => "xzxx" 
  | XZXY => "xzxy" 
  | XZXZ => "xzxz" 
  | XZY => "xzy" 
  | XZYW => "xzyw" 
  | XZYX => "xzyx" 
  | XZYY => "xzyy" 
  | XZYZ => "xzyz" 
  | XZZ => "xzz" 
  | XZZW => "xzzw" 
  | XZZX => "xzzx" 
  | XZZY => "xzzy" 
  | XZZZ => "xzzz" 
  | Y => "y" 
  | YW => "yw" 
  | YWW => "yww" 
  | YWWW => "ywww" 
  | YWWX => "ywwx" 
  | YWWY => "ywwy" 
  | YWWZ => "ywwz" 
  | YWX => "ywx" 
  | YWXW => "ywxw" 
  | YWXX => "ywxx" 
  | YWXY => "ywxy" 
  | YWXZ => "ywxz" 
  | YWY => "ywy" 
  | YWYW => "ywyw" 
  | YWYX => "ywyx" 
  | YWYY => "ywyy" 
  | YWYZ => "ywyz" 
  | YWZ => "ywz" 
  | YWZW => "ywzw" 
  | YWZX => "ywzx" 
  | YWZY => "ywzy" 
  | YWZZ => "ywzz" 
  | YX => "yx" 
  | YXW => "yxw" 
  | YXWW => "yxww" 
  | YXWX => "yxwx" 
  | YXWY => "yxwy" 
  | YXWZ => "yxwz" 
  | YXX => "yxx" 
  | YXXW => "yxxw" 
  | YXXX => "yxxx" 
  | YXXY => "yxxy" 
  | YXXZ => "yxxz" 
  | YXY => "yxy" 
  | YXYW => "yxyw" 
  | YXYX => "yxyx" 
  | YXYY => "yxyy" 
  | YXYZ => "yxyz" 
  | YXZ => "yxz" 
  | YXZW => "yxzw" 
  | YXZX => "yxzx" 
  | YXZY => "yxzy" 
  | YXZZ => "yxzz" 
  | YY => "yy" 
  | YYW => "yyw" 
  | YYWW => "yyww" 
  | YYWX => "yywx" 
  | YYWY => "yywy" 
  | YYWZ => "yywz" 
  | YYX => "yyx" 
  | YYXW => "yyxw" 
  | YYXX => "yyxx" 
  | YYXY => "yyxy" 
  | YYXZ => "yyxz" 
  | YYY => "yyy" 
  | YYYW => "yyyw" 
  | YYYX => "yyyx" 
  | YYYY => "yyyy" 
  | YYYZ => "yyyz" 
  | YYZ => "yyz" 
  | YYZW => "yyzw" 
  | YYZX => "yyzx" 
  | YYZY => "yyzy" 
  | YYZZ => "yyzz" 
  | YZ => "yz" 
  | YZW => "yzw" 
  | YZWW => "yzww" 
  | YZWX => "yzwx" 
  | YZWY => "yzwy" 
  | YZWZ => "yzwz" 
  | YZX => "yzx" 
  | YZXW => "yzxw" 
  | YZXX => "yzxx" 
  | YZXY => "yzxy" 
  | YZXZ => "yzxz" 
  | YZY => "yzy" 
  | YZYW => "yzyw" 
  | YZYX => "yzyx" 
  | YZYY => "yzyy" 
  | YZYZ => "yzyz" 
  | YZZ => "yzz" 
  | YZZW => "yzzw" 
  | YZZX => "yzzx" 
  | YZZY => "yzzy" 
  | YZZZ => "yzzz" 
  | Z => "z" 
  | ZW => "zw" 
  | ZWW => "zww" 
  | ZWWW => "zwww" 
  | ZWWX => "zwwx" 
  | ZWWY => "zwwy" 
  | ZWWZ => "zwwz" 
  | ZWX => "zwx" 
  | ZWXW => "zwxw" 
  | ZWXX => "zwxx" 
  | ZWXY => "zwxy" 
  | ZWXZ => "zwxz" 
  | ZWY => "zwy" 
  | ZWYW => "zwyw" 
  | ZWYX => "zwyx" 
  | ZWYY => "zwyy" 
  | ZWYZ => "zwyz" 
  | ZWZ => "zwz" 
  | ZWZW => "zwzw" 
  | ZWZX => "zwzx" 
  | ZWZY => "zwzy" 
  | ZWZZ => "zwzz" 
  | ZX => "zx" 
  | ZXW => "zxw" 
  | ZXWW => "zxww" 
  | ZXWX => "zxwx" 
  | ZXWY => "zxwy" 
  | ZXWZ => "zxwz" 
  | ZXX => "zxx" 
  | ZXXW => "zxxw" 
  | ZXXX => "zxxx" 
  | ZXXY => "zxxy" 
  | ZXXZ => "zxxz" 
  | ZXY => "zxy" 
  | ZXYW => "zxyw" 
  | ZXYX => "zxyx" 
  | ZXYY => "zxyy" 
  | ZXYZ => "zxyz" 
  | ZXZ => "zxz" 
  | ZXZW => "zxzw" 
  | ZXZX => "zxzx" 
  | ZXZY => "zxzy" 
  | ZXZZ => "zxzz" 
  | ZY => "zy" 
  | ZYW => "zyw" 
  | ZYWW => "zyww" 
  | ZYWX => "zywx" 
  | ZYWY => "zywy" 
  | ZYWZ => "zywz" 
  | ZYX => "zyx" 
  | ZYXW => "zyxw" 
  | ZYXX => "zyxx" 
  | ZYXY => "zyxy" 
  | ZYXZ => "zyxz" 
  | ZYY => "zyy" 
  | ZYYW => "zyyw" 
  | ZYYX => "zyyx" 
  | ZYYY => "zyyy" 
  | ZYYZ => "zyyz" 
  | ZYZ => "zyz" 
  | ZYZW => "zyzw" 
  | ZYZX => "zyzx" 
  | ZYZY => "zyzy" 
  | ZYZZ => "zyzz" 
  | ZZ => "zz" 
  | ZZW => "zzw" 
  | ZZWW => "zzww" 
  | ZZWX => "zzwx" 
  | ZZWY => "zzwy" 
  | ZZWZ => "zzwz" 
  | ZZX => "zzx" 
  | ZZXW => "zzxw" 
  | ZZXX => "zzxx" 
  | ZZXY => "zzxy" 
  | ZZXZ => "zzxz" 
  | ZZY => "zzy" 
  | ZZYW => "zzyw" 
  | ZZYX => "zzyx" 
  | ZZYY => "zzyy" 
  | ZZYZ => "zzyz" 
  | ZZZ => "zzz" 
  | ZZZW => "zzzw" 
  | ZZZX => "zzzx" 
  | ZZZY => "zzzy" 
  | ZZZZ => "zzzz" 
  };

let accept1 : [< `Float | `Vec2 | `Vec3 | `Vec4] => unit = (_) => ();
let accept2 : [< `Vec2 | `Vec3 | `Vec4] => unit = (_) => ();
let accept3 : [< `Vec3 | `Vec4] => unit = (_) => ();
let accept4 : [< `Vec4] => unit = (_) => ();

  let _a = (`Float, A, accept4);
  let _aa = (`Vec2, AA, accept4);
  let _aaa = (`Vec3, AAA, accept4);
  let _aaaa = (`Vec4, AAAA, accept4);
  let _aaab = (`Vec4, AAAB, accept4);
  let _aaag = (`Vec4, AAAG, accept4);
  let _aaar = (`Vec4, AAAR, accept4);
  let _aab = (`Vec3, AAB, accept4);
  let _aaba = (`Vec4, AABA, accept4);
  let _aabb = (`Vec4, AABB, accept4);
  let _aabg = (`Vec4, AABG, accept4);
  let _aabr = (`Vec4, AABR, accept4);
  let _aag = (`Vec3, AAG, accept4);
  let _aaga = (`Vec4, AAGA, accept4);
  let _aagb = (`Vec4, AAGB, accept4);
  let _aagg = (`Vec4, AAGG, accept4);
  let _aagr = (`Vec4, AAGR, accept4);
  let _aar = (`Vec3, AAR, accept4);
  let _aara = (`Vec4, AARA, accept4);
  let _aarb = (`Vec4, AARB, accept4);
  let _aarg = (`Vec4, AARG, accept4);
  let _aarr = (`Vec4, AARR, accept4);
  let _ab = (`Vec2, AB, accept4);
  let _aba = (`Vec3, ABA, accept4);
  let _abaa = (`Vec4, ABAA, accept4);
  let _abab = (`Vec4, ABAB, accept4);
  let _abag = (`Vec4, ABAG, accept4);
  let _abar = (`Vec4, ABAR, accept4);
  let _abb = (`Vec3, ABB, accept4);
  let _abba = (`Vec4, ABBA, accept4);
  let _abbb = (`Vec4, ABBB, accept4);
  let _abbg = (`Vec4, ABBG, accept4);
  let _abbr = (`Vec4, ABBR, accept4);
  let _abg = (`Vec3, ABG, accept4);
  let _abga = (`Vec4, ABGA, accept4);
  let _abgb = (`Vec4, ABGB, accept4);
  let _abgg = (`Vec4, ABGG, accept4);
  let _abgr = (`Vec4, ABGR, accept4);
  let _abr = (`Vec3, ABR, accept4);
  let _abra = (`Vec4, ABRA, accept4);
  let _abrb = (`Vec4, ABRB, accept4);
  let _abrg = (`Vec4, ABRG, accept4);
  let _abrr = (`Vec4, ABRR, accept4);
  let _ag = (`Vec2, AG, accept4);
  let _aga = (`Vec3, AGA, accept4);
  let _agaa = (`Vec4, AGAA, accept4);
  let _agab = (`Vec4, AGAB, accept4);
  let _agag = (`Vec4, AGAG, accept4);
  let _agar = (`Vec4, AGAR, accept4);
  let _agb = (`Vec3, AGB, accept4);
  let _agba = (`Vec4, AGBA, accept4);
  let _agbb = (`Vec4, AGBB, accept4);
  let _agbg = (`Vec4, AGBG, accept4);
  let _agbr = (`Vec4, AGBR, accept4);
  let _agg = (`Vec3, AGG, accept4);
  let _agga = (`Vec4, AGGA, accept4);
  let _aggb = (`Vec4, AGGB, accept4);
  let _aggg = (`Vec4, AGGG, accept4);
  let _aggr = (`Vec4, AGGR, accept4);
  let _agr = (`Vec3, AGR, accept4);
  let _agra = (`Vec4, AGRA, accept4);
  let _agrb = (`Vec4, AGRB, accept4);
  let _agrg = (`Vec4, AGRG, accept4);
  let _agrr = (`Vec4, AGRR, accept4);
  let _ar = (`Vec2, AR, accept4);
  let _ara = (`Vec3, ARA, accept4);
  let _araa = (`Vec4, ARAA, accept4);
  let _arab = (`Vec4, ARAB, accept4);
  let _arag = (`Vec4, ARAG, accept4);
  let _arar = (`Vec4, ARAR, accept4);
  let _arb = (`Vec3, ARB, accept4);
  let _arba = (`Vec4, ARBA, accept4);
  let _arbb = (`Vec4, ARBB, accept4);
  let _arbg = (`Vec4, ARBG, accept4);
  let _arbr = (`Vec4, ARBR, accept4);
  let _arg = (`Vec3, ARG, accept4);
  let _arga = (`Vec4, ARGA, accept4);
  let _argb = (`Vec4, ARGB, accept4);
  let _argg = (`Vec4, ARGG, accept4);
  let _argr = (`Vec4, ARGR, accept4);
  let _arr = (`Vec3, ARR, accept4);
  let _arra = (`Vec4, ARRA, accept4);
  let _arrb = (`Vec4, ARRB, accept4);
  let _arrg = (`Vec4, ARRG, accept4);
  let _arrr = (`Vec4, ARRR, accept4);
  let _b = (`Float, B, accept3);
  let _ba = (`Vec2, BA, accept4);
  let _baa = (`Vec3, BAA, accept4);
  let _baaa = (`Vec4, BAAA, accept4);
  let _baab = (`Vec4, BAAB, accept4);
  let _baag = (`Vec4, BAAG, accept4);
  let _baar = (`Vec4, BAAR, accept4);
  let _bab = (`Vec3, BAB, accept4);
  let _baba = (`Vec4, BABA, accept4);
  let _babb = (`Vec4, BABB, accept4);
  let _babg = (`Vec4, BABG, accept4);
  let _babr = (`Vec4, BABR, accept4);
  let _bag = (`Vec3, BAG, accept4);
  let _baga = (`Vec4, BAGA, accept4);
  let _bagb = (`Vec4, BAGB, accept4);
  let _bagg = (`Vec4, BAGG, accept4);
  let _bagr = (`Vec4, BAGR, accept4);
  let _bar = (`Vec3, BAR, accept4);
  let _bara = (`Vec4, BARA, accept4);
  let _barb = (`Vec4, BARB, accept4);
  let _barg = (`Vec4, BARG, accept4);
  let _barr = (`Vec4, BARR, accept4);
  let _bb = (`Vec2, BB, accept3);
  let _bba = (`Vec3, BBA, accept4);
  let _bbaa = (`Vec4, BBAA, accept4);
  let _bbab = (`Vec4, BBAB, accept4);
  let _bbag = (`Vec4, BBAG, accept4);
  let _bbar = (`Vec4, BBAR, accept4);
  let _bbb = (`Vec3, BBB, accept3);
  let _bbba = (`Vec4, BBBA, accept4);
  let _bbbb = (`Vec4, BBBB, accept3);
  let _bbbg = (`Vec4, BBBG, accept3);
  let _bbbr = (`Vec4, BBBR, accept3);
  let _bbg = (`Vec3, BBG, accept3);
  let _bbga = (`Vec4, BBGA, accept4);
  let _bbgb = (`Vec4, BBGB, accept3);
  let _bbgg = (`Vec4, BBGG, accept3);
  let _bbgr = (`Vec4, BBGR, accept3);
  let _bbr = (`Vec3, BBR, accept3);
  let _bbra = (`Vec4, BBRA, accept4);
  let _bbrb = (`Vec4, BBRB, accept3);
  let _bbrg = (`Vec4, BBRG, accept3);
  let _bbrr = (`Vec4, BBRR, accept3);
  let _bg = (`Vec2, BG, accept3);
  let _bga = (`Vec3, BGA, accept4);
  let _bgaa = (`Vec4, BGAA, accept4);
  let _bgab = (`Vec4, BGAB, accept4);
  let _bgag = (`Vec4, BGAG, accept4);
  let _bgar = (`Vec4, BGAR, accept4);
  let _bgb = (`Vec3, BGB, accept3);
  let _bgba = (`Vec4, BGBA, accept4);
  let _bgbb = (`Vec4, BGBB, accept3);
  let _bgbg = (`Vec4, BGBG, accept3);
  let _bgbr = (`Vec4, BGBR, accept3);
  let _bgg = (`Vec3, BGG, accept3);
  let _bgga = (`Vec4, BGGA, accept4);
  let _bggb = (`Vec4, BGGB, accept3);
  let _bggg = (`Vec4, BGGG, accept3);
  let _bggr = (`Vec4, BGGR, accept3);
  let _bgr = (`Vec3, BGR, accept3);
  let _bgra = (`Vec4, BGRA, accept4);
  let _bgrb = (`Vec4, BGRB, accept3);
  let _bgrg = (`Vec4, BGRG, accept3);
  let _bgrr = (`Vec4, BGRR, accept3);
  let _br = (`Vec2, BR, accept3);
  let _bra = (`Vec3, BRA, accept4);
  let _braa = (`Vec4, BRAA, accept4);
  let _brab = (`Vec4, BRAB, accept4);
  let _brag = (`Vec4, BRAG, accept4);
  let _brar = (`Vec4, BRAR, accept4);
  let _brb = (`Vec3, BRB, accept3);
  let _brba = (`Vec4, BRBA, accept4);
  let _brbb = (`Vec4, BRBB, accept3);
  let _brbg = (`Vec4, BRBG, accept3);
  let _brbr = (`Vec4, BRBR, accept3);
  let _brg = (`Vec3, BRG, accept3);
  let _brga = (`Vec4, BRGA, accept4);
  let _brgb = (`Vec4, BRGB, accept3);
  let _brgg = (`Vec4, BRGG, accept3);
  let _brgr = (`Vec4, BRGR, accept3);
  let _brr = (`Vec3, BRR, accept3);
  let _brra = (`Vec4, BRRA, accept4);
  let _brrb = (`Vec4, BRRB, accept3);
  let _brrg = (`Vec4, BRRG, accept3);
  let _brrr = (`Vec4, BRRR, accept3);
  let _g = (`Float, G, accept1);
  let _ga = (`Vec2, GA, accept4);
  let _gaa = (`Vec3, GAA, accept4);
  let _gaaa = (`Vec4, GAAA, accept4);
  let _gaab = (`Vec4, GAAB, accept4);
  let _gaag = (`Vec4, GAAG, accept4);
  let _gaar = (`Vec4, GAAR, accept4);
  let _gab = (`Vec3, GAB, accept4);
  let _gaba = (`Vec4, GABA, accept4);
  let _gabb = (`Vec4, GABB, accept4);
  let _gabg = (`Vec4, GABG, accept4);
  let _gabr = (`Vec4, GABR, accept4);
  let _gag = (`Vec3, GAG, accept4);
  let _gaga = (`Vec4, GAGA, accept4);
  let _gagb = (`Vec4, GAGB, accept4);
  let _gagg = (`Vec4, GAGG, accept4);
  let _gagr = (`Vec4, GAGR, accept4);
  let _gar = (`Vec3, GAR, accept4);
  let _gara = (`Vec4, GARA, accept4);
  let _garb = (`Vec4, GARB, accept4);
  let _garg = (`Vec4, GARG, accept4);
  let _garr = (`Vec4, GARR, accept4);
  let _gb = (`Vec2, GB, accept3);
  let _gba = (`Vec3, GBA, accept4);
  let _gbaa = (`Vec4, GBAA, accept4);
  let _gbab = (`Vec4, GBAB, accept4);
  let _gbag = (`Vec4, GBAG, accept4);
  let _gbar = (`Vec4, GBAR, accept4);
  let _gbb = (`Vec3, GBB, accept3);
  let _gbba = (`Vec4, GBBA, accept4);
  let _gbbb = (`Vec4, GBBB, accept3);
  let _gbbg = (`Vec4, GBBG, accept3);
  let _gbbr = (`Vec4, GBBR, accept3);
  let _gbg = (`Vec3, GBG, accept3);
  let _gbga = (`Vec4, GBGA, accept4);
  let _gbgb = (`Vec4, GBGB, accept3);
  let _gbgg = (`Vec4, GBGG, accept3);
  let _gbgr = (`Vec4, GBGR, accept3);
  let _gbr = (`Vec3, GBR, accept3);
  let _gbra = (`Vec4, GBRA, accept4);
  let _gbrb = (`Vec4, GBRB, accept3);
  let _gbrg = (`Vec4, GBRG, accept3);
  let _gbrr = (`Vec4, GBRR, accept3);
  let _gg = (`Vec2, GG, accept1);
  let _gga = (`Vec3, GGA, accept4);
  let _ggaa = (`Vec4, GGAA, accept4);
  let _ggab = (`Vec4, GGAB, accept4);
  let _ggag = (`Vec4, GGAG, accept4);
  let _ggar = (`Vec4, GGAR, accept4);
  let _ggb = (`Vec3, GGB, accept3);
  let _ggba = (`Vec4, GGBA, accept4);
  let _ggbb = (`Vec4, GGBB, accept3);
  let _ggbg = (`Vec4, GGBG, accept3);
  let _ggbr = (`Vec4, GGBR, accept3);
  let _ggg = (`Vec3, GGG, accept1);
  let _ggga = (`Vec4, GGGA, accept4);
  let _gggb = (`Vec4, GGGB, accept3);
  let _gggg = (`Vec4, GGGG, accept1);
  let _gggr = (`Vec4, GGGR, accept1);
  let _ggr = (`Vec3, GGR, accept1);
  let _ggra = (`Vec4, GGRA, accept4);
  let _ggrb = (`Vec4, GGRB, accept3);
  let _ggrg = (`Vec4, GGRG, accept1);
  let _ggrr = (`Vec4, GGRR, accept1);
  let _gr = (`Vec2, GR, accept1);
  let _gra = (`Vec3, GRA, accept4);
  let _graa = (`Vec4, GRAA, accept4);
  let _grab = (`Vec4, GRAB, accept4);
  let _grag = (`Vec4, GRAG, accept4);
  let _grar = (`Vec4, GRAR, accept4);
  let _grb = (`Vec3, GRB, accept3);
  let _grba = (`Vec4, GRBA, accept4);
  let _grbb = (`Vec4, GRBB, accept3);
  let _grbg = (`Vec4, GRBG, accept3);
  let _grbr = (`Vec4, GRBR, accept3);
  let _grg = (`Vec3, GRG, accept1);
  let _grga = (`Vec4, GRGA, accept4);
  let _grgb = (`Vec4, GRGB, accept3);
  let _grgg = (`Vec4, GRGG, accept1);
  let _grgr = (`Vec4, GRGR, accept1);
  let _grr = (`Vec3, GRR, accept1);
  let _grra = (`Vec4, GRRA, accept4);
  let _grrb = (`Vec4, GRRB, accept3);
  let _grrg = (`Vec4, GRRG, accept1);
  let _grrr = (`Vec4, GRRR, accept1);
  let _r = (`Float, R, accept1);
  let _ra = (`Vec2, RA, accept4);
  let _raa = (`Vec3, RAA, accept4);
  let _raaa = (`Vec4, RAAA, accept4);
  let _raab = (`Vec4, RAAB, accept4);
  let _raag = (`Vec4, RAAG, accept4);
  let _raar = (`Vec4, RAAR, accept4);
  let _rab = (`Vec3, RAB, accept4);
  let _raba = (`Vec4, RABA, accept4);
  let _rabb = (`Vec4, RABB, accept4);
  let _rabg = (`Vec4, RABG, accept4);
  let _rabr = (`Vec4, RABR, accept4);
  let _rag = (`Vec3, RAG, accept4);
  let _raga = (`Vec4, RAGA, accept4);
  let _ragb = (`Vec4, RAGB, accept4);
  let _ragg = (`Vec4, RAGG, accept4);
  let _ragr = (`Vec4, RAGR, accept4);
  let _rar = (`Vec3, RAR, accept4);
  let _rara = (`Vec4, RARA, accept4);
  let _rarb = (`Vec4, RARB, accept4);
  let _rarg = (`Vec4, RARG, accept4);
  let _rarr = (`Vec4, RARR, accept4);
  let _rb = (`Vec2, RB, accept3);
  let _rba = (`Vec3, RBA, accept4);
  let _rbaa = (`Vec4, RBAA, accept4);
  let _rbab = (`Vec4, RBAB, accept4);
  let _rbag = (`Vec4, RBAG, accept4);
  let _rbar = (`Vec4, RBAR, accept4);
  let _rbb = (`Vec3, RBB, accept3);
  let _rbba = (`Vec4, RBBA, accept4);
  let _rbbb = (`Vec4, RBBB, accept3);
  let _rbbg = (`Vec4, RBBG, accept3);
  let _rbbr = (`Vec4, RBBR, accept3);
  let _rbg = (`Vec3, RBG, accept3);
  let _rbga = (`Vec4, RBGA, accept4);
  let _rbgb = (`Vec4, RBGB, accept3);
  let _rbgg = (`Vec4, RBGG, accept3);
  let _rbgr = (`Vec4, RBGR, accept3);
  let _rbr = (`Vec3, RBR, accept3);
  let _rbra = (`Vec4, RBRA, accept4);
  let _rbrb = (`Vec4, RBRB, accept3);
  let _rbrg = (`Vec4, RBRG, accept3);
  let _rbrr = (`Vec4, RBRR, accept3);
  let _rg = (`Vec2, RG, accept1);
  let _rga = (`Vec3, RGA, accept4);
  let _rgaa = (`Vec4, RGAA, accept4);
  let _rgab = (`Vec4, RGAB, accept4);
  let _rgag = (`Vec4, RGAG, accept4);
  let _rgar = (`Vec4, RGAR, accept4);
  let _rgb = (`Vec3, RGB, accept3);
  let _rgba = (`Vec4, RGBA, accept4);
  let _rgbb = (`Vec4, RGBB, accept3);
  let _rgbg = (`Vec4, RGBG, accept3);
  let _rgbr = (`Vec4, RGBR, accept3);
  let _rgg = (`Vec3, RGG, accept1);
  let _rgga = (`Vec4, RGGA, accept4);
  let _rggb = (`Vec4, RGGB, accept3);
  let _rggg = (`Vec4, RGGG, accept1);
  let _rggr = (`Vec4, RGGR, accept1);
  let _rgr = (`Vec3, RGR, accept1);
  let _rgra = (`Vec4, RGRA, accept4);
  let _rgrb = (`Vec4, RGRB, accept3);
  let _rgrg = (`Vec4, RGRG, accept1);
  let _rgrr = (`Vec4, RGRR, accept1);
  let _rr = (`Vec2, RR, accept1);
  let _rra = (`Vec3, RRA, accept4);
  let _rraa = (`Vec4, RRAA, accept4);
  let _rrab = (`Vec4, RRAB, accept4);
  let _rrag = (`Vec4, RRAG, accept4);
  let _rrar = (`Vec4, RRAR, accept4);
  let _rrb = (`Vec3, RRB, accept3);
  let _rrba = (`Vec4, RRBA, accept4);
  let _rrbb = (`Vec4, RRBB, accept3);
  let _rrbg = (`Vec4, RRBG, accept3);
  let _rrbr = (`Vec4, RRBR, accept3);
  let _rrg = (`Vec3, RRG, accept1);
  let _rrga = (`Vec4, RRGA, accept4);
  let _rrgb = (`Vec4, RRGB, accept3);
  let _rrgg = (`Vec4, RRGG, accept1);
  let _rrgr = (`Vec4, RRGR, accept1);
  let _rrr = (`Vec3, RRR, accept1);
  let _rrra = (`Vec4, RRRA, accept4);
  let _rrrb = (`Vec4, RRRB, accept3);
  let _rrrg = (`Vec4, RRRG, accept1);
  let _rrrr = (`Vec4, RRRR, accept1);
  let _w = (`Float, W, accept4);
  let _ww = (`Vec2, WW, accept4);
  let _www = (`Vec3, WWW, accept4);
  let _wwww = (`Vec4, WWWW, accept4);
  let _wwwx = (`Vec4, WWWX, accept4);
  let _wwwy = (`Vec4, WWWY, accept4);
  let _wwwz = (`Vec4, WWWZ, accept4);
  let _wwx = (`Vec3, WWX, accept4);
  let _wwxw = (`Vec4, WWXW, accept4);
  let _wwxx = (`Vec4, WWXX, accept4);
  let _wwxy = (`Vec4, WWXY, accept4);
  let _wwxz = (`Vec4, WWXZ, accept4);
  let _wwy = (`Vec3, WWY, accept4);
  let _wwyw = (`Vec4, WWYW, accept4);
  let _wwyx = (`Vec4, WWYX, accept4);
  let _wwyy = (`Vec4, WWYY, accept4);
  let _wwyz = (`Vec4, WWYZ, accept4);
  let _wwz = (`Vec3, WWZ, accept4);
  let _wwzw = (`Vec4, WWZW, accept4);
  let _wwzx = (`Vec4, WWZX, accept4);
  let _wwzy = (`Vec4, WWZY, accept4);
  let _wwzz = (`Vec4, WWZZ, accept4);
  let _wx = (`Vec2, WX, accept4);
  let _wxw = (`Vec3, WXW, accept4);
  let _wxww = (`Vec4, WXWW, accept4);
  let _wxwx = (`Vec4, WXWX, accept4);
  let _wxwy = (`Vec4, WXWY, accept4);
  let _wxwz = (`Vec4, WXWZ, accept4);
  let _wxx = (`Vec3, WXX, accept4);
  let _wxxw = (`Vec4, WXXW, accept4);
  let _wxxx = (`Vec4, WXXX, accept4);
  let _wxxy = (`Vec4, WXXY, accept4);
  let _wxxz = (`Vec4, WXXZ, accept4);
  let _wxy = (`Vec3, WXY, accept4);
  let _wxyw = (`Vec4, WXYW, accept4);
  let _wxyx = (`Vec4, WXYX, accept4);
  let _wxyy = (`Vec4, WXYY, accept4);
  let _wxyz = (`Vec4, WXYZ, accept4);
  let _wxz = (`Vec3, WXZ, accept4);
  let _wxzw = (`Vec4, WXZW, accept4);
  let _wxzx = (`Vec4, WXZX, accept4);
  let _wxzy = (`Vec4, WXZY, accept4);
  let _wxzz = (`Vec4, WXZZ, accept4);
  let _wy = (`Vec2, WY, accept4);
  let _wyw = (`Vec3, WYW, accept4);
  let _wyww = (`Vec4, WYWW, accept4);
  let _wywx = (`Vec4, WYWX, accept4);
  let _wywy = (`Vec4, WYWY, accept4);
  let _wywz = (`Vec4, WYWZ, accept4);
  let _wyx = (`Vec3, WYX, accept4);
  let _wyxw = (`Vec4, WYXW, accept4);
  let _wyxx = (`Vec4, WYXX, accept4);
  let _wyxy = (`Vec4, WYXY, accept4);
  let _wyxz = (`Vec4, WYXZ, accept4);
  let _wyy = (`Vec3, WYY, accept4);
  let _wyyw = (`Vec4, WYYW, accept4);
  let _wyyx = (`Vec4, WYYX, accept4);
  let _wyyy = (`Vec4, WYYY, accept4);
  let _wyyz = (`Vec4, WYYZ, accept4);
  let _wyz = (`Vec3, WYZ, accept4);
  let _wyzw = (`Vec4, WYZW, accept4);
  let _wyzx = (`Vec4, WYZX, accept4);
  let _wyzy = (`Vec4, WYZY, accept4);
  let _wyzz = (`Vec4, WYZZ, accept4);
  let _wz = (`Vec2, WZ, accept4);
  let _wzw = (`Vec3, WZW, accept4);
  let _wzww = (`Vec4, WZWW, accept4);
  let _wzwx = (`Vec4, WZWX, accept4);
  let _wzwy = (`Vec4, WZWY, accept4);
  let _wzwz = (`Vec4, WZWZ, accept4);
  let _wzx = (`Vec3, WZX, accept4);
  let _wzxw = (`Vec4, WZXW, accept4);
  let _wzxx = (`Vec4, WZXX, accept4);
  let _wzxy = (`Vec4, WZXY, accept4);
  let _wzxz = (`Vec4, WZXZ, accept4);
  let _wzy = (`Vec3, WZY, accept4);
  let _wzyw = (`Vec4, WZYW, accept4);
  let _wzyx = (`Vec4, WZYX, accept4);
  let _wzyy = (`Vec4, WZYY, accept4);
  let _wzyz = (`Vec4, WZYZ, accept4);
  let _wzz = (`Vec3, WZZ, accept4);
  let _wzzw = (`Vec4, WZZW, accept4);
  let _wzzx = (`Vec4, WZZX, accept4);
  let _wzzy = (`Vec4, WZZY, accept4);
  let _wzzz = (`Vec4, WZZZ, accept4);
  let _x = (`Float, X, accept1);
  let _xw = (`Vec2, XW, accept4);
  let _xww = (`Vec3, XWW, accept4);
  let _xwww = (`Vec4, XWWW, accept4);
  let _xwwx = (`Vec4, XWWX, accept4);
  let _xwwy = (`Vec4, XWWY, accept4);
  let _xwwz = (`Vec4, XWWZ, accept4);
  let _xwx = (`Vec3, XWX, accept4);
  let _xwxw = (`Vec4, XWXW, accept4);
  let _xwxx = (`Vec4, XWXX, accept4);
  let _xwxy = (`Vec4, XWXY, accept4);
  let _xwxz = (`Vec4, XWXZ, accept4);
  let _xwy = (`Vec3, XWY, accept4);
  let _xwyw = (`Vec4, XWYW, accept4);
  let _xwyx = (`Vec4, XWYX, accept4);
  let _xwyy = (`Vec4, XWYY, accept4);
  let _xwyz = (`Vec4, XWYZ, accept4);
  let _xwz = (`Vec3, XWZ, accept4);
  let _xwzw = (`Vec4, XWZW, accept4);
  let _xwzx = (`Vec4, XWZX, accept4);
  let _xwzy = (`Vec4, XWZY, accept4);
  let _xwzz = (`Vec4, XWZZ, accept4);
  let _xx = (`Vec2, XX, accept1);
  let _xxw = (`Vec3, XXW, accept4);
  let _xxww = (`Vec4, XXWW, accept4);
  let _xxwx = (`Vec4, XXWX, accept4);
  let _xxwy = (`Vec4, XXWY, accept4);
  let _xxwz = (`Vec4, XXWZ, accept4);
  let _xxx = (`Vec3, XXX, accept1);
  let _xxxw = (`Vec4, XXXW, accept4);
  let _xxxx = (`Vec4, XXXX, accept1);
  let _xxxy = (`Vec4, XXXY, accept2);
  let _xxxz = (`Vec4, XXXZ, accept3);
  let _xxy = (`Vec3, XXY, accept2);
  let _xxyw = (`Vec4, XXYW, accept4);
  let _xxyx = (`Vec4, XXYX, accept2);
  let _xxyy = (`Vec4, XXYY, accept2);
  let _xxyz = (`Vec4, XXYZ, accept3);
  let _xxz = (`Vec3, XXZ, accept3);
  let _xxzw = (`Vec4, XXZW, accept4);
  let _xxzx = (`Vec4, XXZX, accept3);
  let _xxzy = (`Vec4, XXZY, accept3);
  let _xxzz = (`Vec4, XXZZ, accept3);
  let _xy = (`Vec2, XY, accept2);
  let _xyw = (`Vec3, XYW, accept4);
  let _xyww = (`Vec4, XYWW, accept4);
  let _xywx = (`Vec4, XYWX, accept4);
  let _xywy = (`Vec4, XYWY, accept4);
  let _xywz = (`Vec4, XYWZ, accept4);
  let _xyx = (`Vec3, XYX, accept2);
  let _xyxw = (`Vec4, XYXW, accept4);
  let _xyxx = (`Vec4, XYXX, accept2);
  let _xyxy = (`Vec4, XYXY, accept2);
  let _xyxz = (`Vec4, XYXZ, accept3);
  let _xyy = (`Vec3, XYY, accept2);
  let _xyyw = (`Vec4, XYYW, accept4);
  let _xyyx = (`Vec4, XYYX, accept2);
  let _xyyy = (`Vec4, XYYY, accept2);
  let _xyyz = (`Vec4, XYYZ, accept3);
  let _xyz = (`Vec3, XYZ, accept3);
  let _xyzw = (`Vec4, XYZW, accept4);
  let _xyzx = (`Vec4, XYZX, accept3);
  let _xyzy = (`Vec4, XYZY, accept3);
  let _xyzz = (`Vec4, XYZZ, accept3);
  let _xz = (`Vec2, XZ, accept3);
  let _xzw = (`Vec3, XZW, accept4);
  let _xzww = (`Vec4, XZWW, accept4);
  let _xzwx = (`Vec4, XZWX, accept4);
  let _xzwy = (`Vec4, XZWY, accept4);
  let _xzwz = (`Vec4, XZWZ, accept4);
  let _xzx = (`Vec3, XZX, accept3);
  let _xzxw = (`Vec4, XZXW, accept4);
  let _xzxx = (`Vec4, XZXX, accept3);
  let _xzxy = (`Vec4, XZXY, accept3);
  let _xzxz = (`Vec4, XZXZ, accept3);
  let _xzy = (`Vec3, XZY, accept3);
  let _xzyw = (`Vec4, XZYW, accept4);
  let _xzyx = (`Vec4, XZYX, accept3);
  let _xzyy = (`Vec4, XZYY, accept3);
  let _xzyz = (`Vec4, XZYZ, accept3);
  let _xzz = (`Vec3, XZZ, accept3);
  let _xzzw = (`Vec4, XZZW, accept4);
  let _xzzx = (`Vec4, XZZX, accept3);
  let _xzzy = (`Vec4, XZZY, accept3);
  let _xzzz = (`Vec4, XZZZ, accept3);
  let _y = (`Float, Y, accept2);
  let _yw = (`Vec2, YW, accept4);
  let _yww = (`Vec3, YWW, accept4);
  let _ywww = (`Vec4, YWWW, accept4);
  let _ywwx = (`Vec4, YWWX, accept4);
  let _ywwy = (`Vec4, YWWY, accept4);
  let _ywwz = (`Vec4, YWWZ, accept4);
  let _ywx = (`Vec3, YWX, accept4);
  let _ywxw = (`Vec4, YWXW, accept4);
  let _ywxx = (`Vec4, YWXX, accept4);
  let _ywxy = (`Vec4, YWXY, accept4);
  let _ywxz = (`Vec4, YWXZ, accept4);
  let _ywy = (`Vec3, YWY, accept4);
  let _ywyw = (`Vec4, YWYW, accept4);
  let _ywyx = (`Vec4, YWYX, accept4);
  let _ywyy = (`Vec4, YWYY, accept4);
  let _ywyz = (`Vec4, YWYZ, accept4);
  let _ywz = (`Vec3, YWZ, accept4);
  let _ywzw = (`Vec4, YWZW, accept4);
  let _ywzx = (`Vec4, YWZX, accept4);
  let _ywzy = (`Vec4, YWZY, accept4);
  let _ywzz = (`Vec4, YWZZ, accept4);
  let _yx = (`Vec2, YX, accept2);
  let _yxw = (`Vec3, YXW, accept4);
  let _yxww = (`Vec4, YXWW, accept4);
  let _yxwx = (`Vec4, YXWX, accept4);
  let _yxwy = (`Vec4, YXWY, accept4);
  let _yxwz = (`Vec4, YXWZ, accept4);
  let _yxx = (`Vec3, YXX, accept2);
  let _yxxw = (`Vec4, YXXW, accept4);
  let _yxxx = (`Vec4, YXXX, accept2);
  let _yxxy = (`Vec4, YXXY, accept2);
  let _yxxz = (`Vec4, YXXZ, accept3);
  let _yxy = (`Vec3, YXY, accept2);
  let _yxyw = (`Vec4, YXYW, accept4);
  let _yxyx = (`Vec4, YXYX, accept2);
  let _yxyy = (`Vec4, YXYY, accept2);
  let _yxyz = (`Vec4, YXYZ, accept3);
  let _yxz = (`Vec3, YXZ, accept3);
  let _yxzw = (`Vec4, YXZW, accept4);
  let _yxzx = (`Vec4, YXZX, accept3);
  let _yxzy = (`Vec4, YXZY, accept3);
  let _yxzz = (`Vec4, YXZZ, accept3);
  let _yy = (`Vec2, YY, accept2);
  let _yyw = (`Vec3, YYW, accept4);
  let _yyww = (`Vec4, YYWW, accept4);
  let _yywx = (`Vec4, YYWX, accept4);
  let _yywy = (`Vec4, YYWY, accept4);
  let _yywz = (`Vec4, YYWZ, accept4);
  let _yyx = (`Vec3, YYX, accept2);
  let _yyxw = (`Vec4, YYXW, accept4);
  let _yyxx = (`Vec4, YYXX, accept2);
  let _yyxy = (`Vec4, YYXY, accept2);
  let _yyxz = (`Vec4, YYXZ, accept3);
  let _yyy = (`Vec3, YYY, accept2);
  let _yyyw = (`Vec4, YYYW, accept4);
  let _yyyx = (`Vec4, YYYX, accept2);
  let _yyyy = (`Vec4, YYYY, accept2);
  let _yyyz = (`Vec4, YYYZ, accept3);
  let _yyz = (`Vec3, YYZ, accept3);
  let _yyzw = (`Vec4, YYZW, accept4);
  let _yyzx = (`Vec4, YYZX, accept3);
  let _yyzy = (`Vec4, YYZY, accept3);
  let _yyzz = (`Vec4, YYZZ, accept3);
  let _yz = (`Vec2, YZ, accept3);
  let _yzw = (`Vec3, YZW, accept4);
  let _yzww = (`Vec4, YZWW, accept4);
  let _yzwx = (`Vec4, YZWX, accept4);
  let _yzwy = (`Vec4, YZWY, accept4);
  let _yzwz = (`Vec4, YZWZ, accept4);
  let _yzx = (`Vec3, YZX, accept3);
  let _yzxw = (`Vec4, YZXW, accept4);
  let _yzxx = (`Vec4, YZXX, accept3);
  let _yzxy = (`Vec4, YZXY, accept3);
  let _yzxz = (`Vec4, YZXZ, accept3);
  let _yzy = (`Vec3, YZY, accept3);
  let _yzyw = (`Vec4, YZYW, accept4);
  let _yzyx = (`Vec4, YZYX, accept3);
  let _yzyy = (`Vec4, YZYY, accept3);
  let _yzyz = (`Vec4, YZYZ, accept3);
  let _yzz = (`Vec3, YZZ, accept3);
  let _yzzw = (`Vec4, YZZW, accept4);
  let _yzzx = (`Vec4, YZZX, accept3);
  let _yzzy = (`Vec4, YZZY, accept3);
  let _yzzz = (`Vec4, YZZZ, accept3);
  let _z = (`Float, Z, accept3);
  let _zw = (`Vec2, ZW, accept4);
  let _zww = (`Vec3, ZWW, accept4);
  let _zwww = (`Vec4, ZWWW, accept4);
  let _zwwx = (`Vec4, ZWWX, accept4);
  let _zwwy = (`Vec4, ZWWY, accept4);
  let _zwwz = (`Vec4, ZWWZ, accept4);
  let _zwx = (`Vec3, ZWX, accept4);
  let _zwxw = (`Vec4, ZWXW, accept4);
  let _zwxx = (`Vec4, ZWXX, accept4);
  let _zwxy = (`Vec4, ZWXY, accept4);
  let _zwxz = (`Vec4, ZWXZ, accept4);
  let _zwy = (`Vec3, ZWY, accept4);
  let _zwyw = (`Vec4, ZWYW, accept4);
  let _zwyx = (`Vec4, ZWYX, accept4);
  let _zwyy = (`Vec4, ZWYY, accept4);
  let _zwyz = (`Vec4, ZWYZ, accept4);
  let _zwz = (`Vec3, ZWZ, accept4);
  let _zwzw = (`Vec4, ZWZW, accept4);
  let _zwzx = (`Vec4, ZWZX, accept4);
  let _zwzy = (`Vec4, ZWZY, accept4);
  let _zwzz = (`Vec4, ZWZZ, accept4);
  let _zx = (`Vec2, ZX, accept3);
  let _zxw = (`Vec3, ZXW, accept4);
  let _zxww = (`Vec4, ZXWW, accept4);
  let _zxwx = (`Vec4, ZXWX, accept4);
  let _zxwy = (`Vec4, ZXWY, accept4);
  let _zxwz = (`Vec4, ZXWZ, accept4);
  let _zxx = (`Vec3, ZXX, accept3);
  let _zxxw = (`Vec4, ZXXW, accept4);
  let _zxxx = (`Vec4, ZXXX, accept3);
  let _zxxy = (`Vec4, ZXXY, accept3);
  let _zxxz = (`Vec4, ZXXZ, accept3);
  let _zxy = (`Vec3, ZXY, accept3);
  let _zxyw = (`Vec4, ZXYW, accept4);
  let _zxyx = (`Vec4, ZXYX, accept3);
  let _zxyy = (`Vec4, ZXYY, accept3);
  let _zxyz = (`Vec4, ZXYZ, accept3);
  let _zxz = (`Vec3, ZXZ, accept3);
  let _zxzw = (`Vec4, ZXZW, accept4);
  let _zxzx = (`Vec4, ZXZX, accept3);
  let _zxzy = (`Vec4, ZXZY, accept3);
  let _zxzz = (`Vec4, ZXZZ, accept3);
  let _zy = (`Vec2, ZY, accept3);
  let _zyw = (`Vec3, ZYW, accept4);
  let _zyww = (`Vec4, ZYWW, accept4);
  let _zywx = (`Vec4, ZYWX, accept4);
  let _zywy = (`Vec4, ZYWY, accept4);
  let _zywz = (`Vec4, ZYWZ, accept4);
  let _zyx = (`Vec3, ZYX, accept3);
  let _zyxw = (`Vec4, ZYXW, accept4);
  let _zyxx = (`Vec4, ZYXX, accept3);
  let _zyxy = (`Vec4, ZYXY, accept3);
  let _zyxz = (`Vec4, ZYXZ, accept3);
  let _zyy = (`Vec3, ZYY, accept3);
  let _zyyw = (`Vec4, ZYYW, accept4);
  let _zyyx = (`Vec4, ZYYX, accept3);
  let _zyyy = (`Vec4, ZYYY, accept3);
  let _zyyz = (`Vec4, ZYYZ, accept3);
  let _zyz = (`Vec3, ZYZ, accept3);
  let _zyzw = (`Vec4, ZYZW, accept4);
  let _zyzx = (`Vec4, ZYZX, accept3);
  let _zyzy = (`Vec4, ZYZY, accept3);
  let _zyzz = (`Vec4, ZYZZ, accept3);
  let _zz = (`Vec2, ZZ, accept3);
  let _zzw = (`Vec3, ZZW, accept4);
  let _zzww = (`Vec4, ZZWW, accept4);
  let _zzwx = (`Vec4, ZZWX, accept4);
  let _zzwy = (`Vec4, ZZWY, accept4);
  let _zzwz = (`Vec4, ZZWZ, accept4);
  let _zzx = (`Vec3, ZZX, accept3);
  let _zzxw = (`Vec4, ZZXW, accept4);
  let _zzxx = (`Vec4, ZZXX, accept3);
  let _zzxy = (`Vec4, ZZXY, accept3);
  let _zzxz = (`Vec4, ZZXZ, accept3);
  let _zzy = (`Vec3, ZZY, accept3);
  let _zzyw = (`Vec4, ZZYW, accept4);
  let _zzyx = (`Vec4, ZZYX, accept3);
  let _zzyy = (`Vec4, ZZYY, accept3);
  let _zzyz = (`Vec4, ZZYZ, accept3);
  let _zzz = (`Vec3, ZZZ, accept3);
  let _zzzw = (`Vec4, ZZZW, accept4);
  let _zzzx = (`Vec4, ZZZX, accept3);
  let _zzzy = (`Vec4, ZZZY, accept3);
  let _zzzz = (`Vec4, ZZZZ, accept3);
